// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import datacom "github.com/terrariumai/simulation/pkg/datacom"
import endpoints_terrariumai_collective "github.com/terrariumai/simulation/pkg/api/collective"
import endpoints_terrariumai_environment "github.com/terrariumai/simulation/pkg/api/environment"

import mock "github.com/stretchr/testify/mock"

// DataAccessLayer is an autogenerated mock type for the DataAccessLayer type
type DataAccessLayer struct {
	mock.Mock
}

// CreateEntity provides a mock function with given fields: e
func (_m *DataAccessLayer) CreateEntity(e endpoints_terrariumai_environment.Entity) error {
	ret := _m.Called(e)

	var r0 error
	if rf, ok := ret.Get(0).(func(endpoints_terrariumai_environment.Entity) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEntity provides a mock function with given fields: id
func (_m *DataAccessLayer) DeleteEntity(id string) (int64, error) {
	ret := _m.Called(id)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEntitiesForModel provides a mock function with given fields: modelID
func (_m *DataAccessLayer) GetEntitiesForModel(modelID string) ([]endpoints_terrariumai_environment.Entity, error) {
	ret := _m.Called(modelID)

	var r0 []endpoints_terrariumai_environment.Entity
	if rf, ok := ret.Get(0).(func(string) []endpoints_terrariumai_environment.Entity); ok {
		r0 = rf(modelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]endpoints_terrariumai_environment.Entity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(modelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEntitiesInRegion provides a mock function with given fields: x, y
func (_m *DataAccessLayer) GetEntitiesInRegion(x uint32, y uint32) ([]*endpoints_terrariumai_environment.Entity, error) {
	ret := _m.Called(x, y)

	var r0 []*endpoints_terrariumai_environment.Entity
	if rf, ok := ret.Get(0).(func(uint32, uint32) []*endpoints_terrariumai_environment.Entity); ok {
		r0 = rf(x, y)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*endpoints_terrariumai_environment.Entity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint32, uint32) error); ok {
		r1 = rf(x, y)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEntity provides a mock function with given fields: id
func (_m *DataAccessLayer) GetEntity(id string) (*endpoints_terrariumai_environment.Entity, *string, error) {
	ret := _m.Called(id)

	var r0 *endpoints_terrariumai_environment.Entity
	if rf, ok := ret.Get(0).(func(string) *endpoints_terrariumai_environment.Entity); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*endpoints_terrariumai_environment.Entity)
		}
	}

	var r1 *string
	if rf, ok := ret.Get(1).(func(string) *string); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetObservationForEntity provides a mock function with given fields: entity
func (_m *DataAccessLayer) GetObservationForEntity(entity endpoints_terrariumai_environment.Entity) (*endpoints_terrariumai_collective.Observation, error) {
	ret := _m.Called(entity)

	var r0 *endpoints_terrariumai_collective.Observation
	if rf, ok := ret.Get(0).(func(endpoints_terrariumai_environment.Entity) *endpoints_terrariumai_collective.Observation); ok {
		r0 = rf(entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*endpoints_terrariumai_collective.Observation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(endpoints_terrariumai_environment.Entity) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRemoteModelMetadataByID provides a mock function with given fields: modelID
func (_m *DataAccessLayer) GetRemoteModelMetadataByID(modelID string) (*datacom.RemoteModel, error) {
	ret := _m.Called(modelID)

	var r0 *datacom.RemoteModel
	if rf, ok := ret.Get(0).(func(string) *datacom.RemoteModel); ok {
		r0 = rf(modelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datacom.RemoteModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(modelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRemoteModelMetadataBySecret provides a mock function with given fields: modelSecret
func (_m *DataAccessLayer) GetRemoteModelMetadataBySecret(modelSecret string) (*datacom.RemoteModel, error) {
	ret := _m.Called(modelSecret)

	var r0 *datacom.RemoteModel
	if rf, ok := ret.Get(0).(func(string) *datacom.RemoteModel); ok {
		r0 = rf(modelSecret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datacom.RemoteModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(modelSecret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsCellOccupied provides a mock function with given fields: x, y
func (_m *DataAccessLayer) IsCellOccupied(x uint32, y uint32) (bool, error) {
	ret := _m.Called(x, y)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint32, uint32) bool); ok {
		r0 = rf(x, y)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint32, uint32) error); ok {
		r1 = rf(x, y)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEntity provides a mock function with given fields: origionalContent, e
func (_m *DataAccessLayer) UpdateEntity(origionalContent string, e endpoints_terrariumai_environment.Entity) error {
	ret := _m.Called(origionalContent, e)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, endpoints_terrariumai_environment.Entity) error); ok {
		r0 = rf(origionalContent, e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRemoteModelMetadata provides a mock function with given fields: remoteModelMD, connectCount
func (_m *DataAccessLayer) UpdateRemoteModelMetadata(remoteModelMD *datacom.RemoteModel, connectCount int) error {
	ret := _m.Called(remoteModelMD, connectCount)

	var r0 error
	if rf, ok := ret.Get(0).(func(*datacom.RemoteModel, int) error); ok {
		r0 = rf(remoteModelMD, connectCount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
