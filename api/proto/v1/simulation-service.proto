syntax = "proto3";
package v1;

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info : {
    title : "Simulation service"
    version : "1.0"
    contact : {
      name : "simulation project"
      url : "https://github.com/terrariumai/simulation"
      email : "zacharyholland@gmail.com"
    }
  }
  schemes : HTTP
  consumes : "application/json"
  produces : "application/json"
  responses : {
    key : "404"
    value : {
      description : "Returned when the resource does not exist."
      schema : {json_schema : {type : STRING}}
    }
  }
};

// Taks we have to do
message Entity {
  // Unique integer identifier of the agent
  int64 id = 1;
  // Entity stats
  string class = 2;
  int32 x = 3;
  int32 y = 4;
  int32 energy = 5;
  int32 health = 6;
  // Owner details
  string ownerUID = 7;
  string modelName = 8;
}

// Request data to create new agent
message CreateEntityRequest {
  string api = 1;
  // agent
  Entity agent = 2;
}
// Contains data of created agent
message CreateEntityResponse {
  string api = 1;
  // ID of created agent
  int64 id = 2;
}

// Request data to read entity
message GetEntityRequest {
  string api = 1;
  // Unique integer identifier of the agent
  int64 id = 2;
}
// Contains entity data specified in by ID request
message GetEntityResponse {
  string api = 1;
  // Task entity read by ID
  Entity entity = 2;
}

// Request data to delete agent
message DeleteEntityRequest {
  string api = 1;
  // Unique integer identifier of the agent to delete
  int64 id = 2;
}
// Contains status of delete operation
message DeleteEntityResponse {
  string api = 1;
  // Contains number of entities have beed deleted
  // Equals 1 in case of successful delete
  int64 deleted = 2;
}

message ExecuteAgentActionRequest {
  string api = 1;
  // Id for the agent that should perform the action
  int64 id = 2;
  // identifier for the action
  // 0: MOVE
  // 1: EAT
  uint32 action = 3;
  // direction to perform the action in
  // 0: UP
  // 1: DOWN
  // 2: LEFT
  // 3: RIGHT
  uint32 direction = 4;
}
message ExecuteAgentActionResponse {
  string api = 1;
  // Was the agent able to perform the action
  bool wasSuccessful = 3;
}

message ResetWorldRequest { string api = 1; }
message ResetWorldResponse {}

// ----------------------
// -- Generic Entity
// ----------------------

// Service to manage simulation
service SimulationService {
  // Create new agent
  rpc CreateEntity(CreateEntityRequest) returns (CreateEntityResponse) {
    option (google.api.http) = {
      post : "/v1/agent"
      body : "*"
    };
  }

  // Get data for an entity
  rpc GetEntity(GetEntityRequest) returns (GetEntityResponse) {
    option (google.api.http) = {
      get : "/v1/entity/{id}"
    };
  }

  // Delete an agent
  rpc DeleteEntity(DeleteEntityRequest) returns (DeleteEntityResponse) {
    option (google.api.http) = {
      get : "/v1/agent/{id}"
    };
  }

  // Perform an action for an agent
  rpc ExecuteAgentAction(ExecuteAgentActionRequest)
      returns (ExecuteAgentActionResponse) {
    option (google.api.http) = {
      put : "/v1/agent/{id}"
      body : "*"
    };
  }

  // Reset the world
  rpc ResetWorld(ResetWorldRequest) returns (ResetWorldResponse) {
    option (google.api.http) = {
      put : "/v1/reset"
      body : "*"
    };
  }
}