{
  "swagger": "2.0",
  "info": {
    "title": "Simulation service",
    "version": "1.0",
    "contact": {
      "name": "simulation project",
      "url": "https://github.com/terrariumai/simulation",
      "email": "zacharyholland@gmail.com"
    }
  },
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/agent": {
      "post": {
        "summary": "Create new agent",
        "operationId": "CreateEntity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateEntityResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateEntityRequest"
            }
          }
        ],
        "tags": [
          "SimulationService"
        ]
      }
    },
    "/v1/agent/{id}": {
      "get": {
        "summary": "Delete an agent",
        "operationId": "DeleteEntity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteEntityResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Unique integer identifier of the agent to delete",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "api",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "SimulationService"
        ]
      },
      "put": {
        "summary": "Perform an action for an agent",
        "operationId": "ExecuteAgentAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ExecuteAgentActionResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id for the agent that should perform the action",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ExecuteAgentActionRequest"
            }
          }
        ],
        "tags": [
          "SimulationService"
        ]
      }
    },
    "/v1/entity/{id}": {
      "get": {
        "summary": "Get data for an entity",
        "operationId": "GetEntity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetEntityResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Unique integer identifier of the agent",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "api",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "SimulationService"
        ]
      }
    },
    "/v1/reset": {
      "put": {
        "summary": "Reset the world",
        "operationId": "ResetWorld",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ResetWorldResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ResetWorldRequest"
            }
          }
        ],
        "tags": [
          "SimulationService"
        ]
      }
    }
  },
  "definitions": {
    "v1CreateEntityRequest": {
      "type": "object",
      "properties": {
        "api": {
          "type": "string"
        },
        "agent": {
          "$ref": "#/definitions/v1Entity",
          "title": "agent"
        }
      },
      "title": "Request data to create new agent"
    },
    "v1CreateEntityResponse": {
      "type": "object",
      "properties": {
        "api": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "int64",
          "title": "ID of created agent"
        }
      },
      "title": "Contains data of created agent"
    },
    "v1DeleteEntityResponse": {
      "type": "object",
      "properties": {
        "api": {
          "type": "string"
        },
        "deleted": {
          "type": "string",
          "format": "int64",
          "title": "Contains number of entities have beed deleted\nEquals 1 in case of successful delete"
        }
      },
      "title": "Contains status of delete operation"
    },
    "v1Entity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Unique integer identifier of the agent"
        },
        "class": {
          "type": "string",
          "title": "Entity stats"
        },
        "x": {
          "type": "integer",
          "format": "int32"
        },
        "y": {
          "type": "integer",
          "format": "int32"
        },
        "energy": {
          "type": "integer",
          "format": "int32"
        },
        "health": {
          "type": "integer",
          "format": "int32"
        },
        "ownerUID": {
          "type": "string",
          "title": "Owner details"
        },
        "modelName": {
          "type": "string"
        }
      },
      "title": "Taks we have to do"
    },
    "v1ExecuteAgentActionRequest": {
      "type": "object",
      "properties": {
        "api": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Id for the agent that should perform the action"
        },
        "action": {
          "type": "integer",
          "format": "int64",
          "title": "identifier for the action\n0: MOVE\n1: EAT"
        },
        "direction": {
          "type": "integer",
          "format": "int64",
          "title": "direction to perform the action in\n0: UP\n1: DOWN\n2: LEFT\n3: RIGHT"
        }
      }
    },
    "v1ExecuteAgentActionResponse": {
      "type": "object",
      "properties": {
        "api": {
          "type": "string"
        },
        "wasSuccessful": {
          "type": "boolean",
          "format": "boolean",
          "title": "Was the agent able to perform the action"
        }
      }
    },
    "v1GetEntityResponse": {
      "type": "object",
      "properties": {
        "api": {
          "type": "string"
        },
        "entity": {
          "$ref": "#/definitions/v1Entity",
          "title": "Task entity read by ID"
        }
      },
      "title": "Contains entity data specified in by ID request"
    },
    "v1ResetWorldRequest": {
      "type": "object",
      "properties": {
        "api": {
          "type": "string"
        }
      }
    },
    "v1ResetWorldResponse": {
      "type": "object"
    }
  }
}
