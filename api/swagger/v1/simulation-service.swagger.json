{
  "swagger": "2.0",
  "info": {
    "title": "Simulation service",
    "version": "1.0",
    "contact": {
      "name": "simulation project",
      "url": "https://github.com/olamai/simulation",
      "email": "zacharyholland@gmail.com"
    }
  },
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/agent": {
      "post": {
        "summary": "Create new agent",
        "operationId": "CreateAgent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateAgentResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateAgentRequest"
            }
          }
        ],
        "tags": [
          "SimulationService"
        ]
      }
    },
    "/v1/agent/{id}": {
      "get": {
        "summary": "Delete an agent",
        "operationId": "DeleteAgent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteAgentResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Unique integer identifier of the agent to delete",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "api",
            "description": "API versioning: it is my best practice to specify version explicitly.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "SimulationService"
        ]
      },
      "put": {
        "summary": "Perform an action for an agent",
        "operationId": "ExecuteAgentAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ExecuteAgentActionResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id for the agent that should perform the action",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ExecuteAgentActionRequest"
            }
          }
        ],
        "tags": [
          "SimulationService"
        ]
      }
    },
    "/v1/agent/{id}/observation": {
      "get": {
        "summary": "Get the observation for an agent",
        "operationId": "GetAgentObservation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAgentObservationResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Agent that should perform the action",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "api",
            "description": "API versioning: it is my best practice to specify version explicitly.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "SimulationService"
        ]
      }
    },
    "/v1/entity/{id}": {
      "get": {
        "summary": "Get data for an entity",
        "operationId": "GetEntity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetEntityResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Unique integer identifier of the agent",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "api",
            "description": "API versioning: it is my best practice to specify version explicitly.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "SimulationService"
        ]
      }
    },
    "/v1/reset": {
      "put": {
        "summary": "Reset the world",
        "operationId": "ResetWorld",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ResetWorldResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ResetWorldRequest"
            }
          }
        ],
        "tags": [
          "SimulationService"
        ]
      }
    },
    "/v1/spectator": {
      "get": {
        "summary": "Create a new spectator stream",
        "operationId": "CreateSpectator",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "$ref": "#/x-stream-definitions/v1CellUpdate"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "api",
            "description": "API versioning: it is my best practice to specify version explicitly.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Id of the spectator.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "SimulationService"
        ]
      }
    },
    "/v1/spectator/{id}/subscribeToRegion": {
      "put": {
        "summary": "Subscribe the spectator of given id to a region",
        "operationId": "SubscribeSpectatorToRegion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SubscribeSpectatorToRegionResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id of the spectator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SubscribeSpectatorToRegionRequest"
            }
          }
        ],
        "tags": [
          "SimulationService"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "runtimeStreamError": {
      "type": "object",
      "properties": {
        "grpc_code": {
          "type": "integer",
          "format": "int32"
        },
        "http_code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "http_status": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1Action": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "identifier for the action\nEx. Move, Eat, etc."
        },
        "direction": {
          "type": "string",
          "description": "direction to perform the action in\nEx. Up, Down, etc."
        }
      }
    },
    "v1CellUpdate": {
      "type": "object",
      "properties": {
        "x": {
          "type": "integer",
          "format": "int32",
          "title": "Position"
        },
        "y": {
          "type": "integer",
          "format": "int32"
        },
        "action": {
          "type": "string",
          "title": "If we want to perform an action instead"
        },
        "entity": {
          "$ref": "#/definitions/v1Entity",
          "title": "The entity occupying a cell"
        }
      }
    },
    "v1CreateAgentRequest": {
      "type": "object",
      "properties": {
        "api": {
          "type": "string",
          "title": "API versioning: it is my best practice to specify version explicitly"
        },
        "agent": {
          "$ref": "#/definitions/v1Entity",
          "title": "Agent to add"
        }
      },
      "title": "----------------------\n-- Agent\n----------------------\nRequest data to create new agent"
    },
    "v1CreateAgentResponse": {
      "type": "object",
      "properties": {
        "api": {
          "type": "string",
          "title": "API versioning: it is my best practice to specify version explicitly"
        },
        "id": {
          "type": "string",
          "format": "int64",
          "title": "ID of created agent"
        }
      },
      "title": "Contains data of created agent"
    },
    "v1DeleteAgentResponse": {
      "type": "object",
      "properties": {
        "api": {
          "type": "string",
          "title": "API versioning: it is my best practice to specify version explicitly"
        },
        "deleted": {
          "type": "string",
          "format": "int64",
          "title": "Contains number of entities have beed deleted\nEquals 1 in case of successful delete"
        }
      },
      "title": "Contains status of delete operation"
    },
    "v1Entity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Unique integer identifier of the agent"
        },
        "x": {
          "type": "integer",
          "format": "int32",
          "title": "Position"
        },
        "y": {
          "type": "integer",
          "format": "int32"
        },
        "class": {
          "type": "string",
          "title": "Entity class"
        }
      },
      "title": "Taks we have to do"
    },
    "v1ExecuteAgentActionRequest": {
      "type": "object",
      "properties": {
        "api": {
          "type": "string",
          "title": "API versioning: it is my best practice to specify version explicitly"
        },
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Id for the agent that should perform the action"
        },
        "action": {
          "$ref": "#/definitions/v1Action",
          "title": "Action id"
        }
      }
    },
    "v1ExecuteAgentActionResponse": {
      "type": "object",
      "properties": {
        "api": {
          "type": "string",
          "title": "API versioning: it is my best practice to specify version explicitly"
        },
        "isAgentStillAlive": {
          "type": "boolean",
          "format": "boolean"
        },
        "wasActionSuccessful": {
          "type": "boolean",
          "format": "boolean",
          "title": "Was the agent able to perform the action"
        }
      }
    },
    "v1GetAgentObservationResponse": {
      "type": "object",
      "properties": {
        "api": {
          "type": "string",
          "title": "API versioning: it is my best practice to specify version explicitly"
        },
        "observation": {
          "$ref": "#/definitions/v1Observation",
          "title": "Was the agent able to perform the action"
        }
      }
    },
    "v1GetEntityResponse": {
      "type": "object",
      "properties": {
        "api": {
          "type": "string",
          "title": "API versioning: it is my best practice to specify version explicitly"
        },
        "entity": {
          "$ref": "#/definitions/v1Entity",
          "title": "Task entity read by ID"
        }
      },
      "title": "Contains entity data specified in by ID request"
    },
    "v1Observation": {
      "type": "object",
      "properties": {
        "Cells": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Cells around the agent"
        },
        "Alive": {
          "type": "boolean",
          "format": "boolean",
          "title": "Agent stats"
        },
        "Energy": {
          "type": "integer",
          "format": "int32"
        },
        "Health": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1Region": {
      "type": "object",
      "properties": {
        "x": {
          "type": "integer",
          "format": "int32"
        },
        "y": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ResetWorldRequest": {
      "type": "object",
      "properties": {
        "api": {
          "type": "string"
        }
      }
    },
    "v1ResetWorldResponse": {
      "type": "object"
    },
    "v1SubscribeSpectatorToRegionRequest": {
      "type": "object",
      "properties": {
        "api": {
          "type": "string",
          "title": "API versioning: it is my best practice to specify version explicitly"
        },
        "id": {
          "type": "string",
          "title": "Id of the spectator"
        },
        "region": {
          "$ref": "#/definitions/v1Region",
          "title": "What region to add to"
        }
      }
    },
    "v1SubscribeSpectatorToRegionResponse": {
      "type": "object",
      "properties": {
        "api": {
          "type": "string",
          "title": "API versioning: it is my best practice to specify version explicitly"
        },
        "successful": {
          "type": "boolean",
          "format": "boolean",
          "title": "Success status"
        }
      }
    }
  },
  "x-stream-definitions": {
    "v1CellUpdate": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v1CellUpdate"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of v1CellUpdate"
    }
  }
}
